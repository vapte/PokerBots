from playerclass import *
from db import *

#AF Exploit Bot
#   exploits AF of other bots conditional on implied EV premium 
#   checks all to get data on other players
class AfExploit(Player):
    def __init__(self, name):
        super().__init__(name)
        self.type = 'afexploit'

    #bot control function
    def botLogic(self):
        super().botLogic()
        shouldReturn = None
        actionsDict = self.actionsParse()
        if actionsDict.get('check',False):
            return ('check', 0)
        elif actionsDict.get('fold',False):
            shouldReturn = self.callBetRaise(actionsDict)
        if shouldReturn==None:
            shouldReturn=('fold',0)
        return self.checkReturnVal(shouldReturn,actionsDict)

    #makes decision for call bet and raise
    def callBetRaise(self,actionsDict):
        if self.impliedEV>0 and self.EV<0 and actionsDict.get('call',False):
             return ('call',actionsDict['callVals'])
        elif self.impliedEV>0.8 and self.EV>0 and actionsDict.get('bet',False):
            return ('bet', actionsDict['betVals'][0])
        elif self.impliedEV>0 and self.EV>0 and actionsDict.get('raise',False):
            maxRaiseIndex = len(actionsDict['raiseVals'])-1
            if self.impliedEV>0.4:
                specRaise = maxRaiseIndex
            elif self.impliedEV>0.2:
                specRaise = maxRaiseIndex//2
            try:
                return ('raise',actionsDict['raiseVals'][specRaise])    #test value
            except:
                #sometime we don't set a raise value
                pass
        else:
            return ('fold',0)
            